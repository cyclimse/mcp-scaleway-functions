// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockcockpit

import (
	"context"
	"time"

	"github.com/cyclimse/mcp-scaleway-functions/internal/scaleway/cockpit"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ListFunctionBuildLogs provides a mock function for the type MockClient
func (_mock *MockClient) ListFunctionBuildLogs(ctx context.Context, resourceName string, start time.Time, end time.Time) ([]cockpit.Log, error) {
	ret := _mock.Called(ctx, resourceName, start, end)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionBuildLogs")
	}

	var r0 []cockpit.Log
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]cockpit.Log, error)); ok {
		return returnFunc(ctx, resourceName, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []cockpit.Log); ok {
		r0 = returnFunc(ctx, resourceName, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cockpit.Log)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, resourceName, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListFunctionBuildLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionBuildLogs'
type MockClient_ListFunctionBuildLogs_Call struct {
	*mock.Call
}

// ListFunctionBuildLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - start time.Time
//   - end time.Time
func (_e *MockClient_Expecter) ListFunctionBuildLogs(ctx interface{}, resourceName interface{}, start interface{}, end interface{}) *MockClient_ListFunctionBuildLogs_Call {
	return &MockClient_ListFunctionBuildLogs_Call{Call: _e.mock.On("ListFunctionBuildLogs", ctx, resourceName, start, end)}
}

func (_c *MockClient_ListFunctionBuildLogs_Call) Run(run func(ctx context.Context, resourceName string, start time.Time, end time.Time)) *MockClient_ListFunctionBuildLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClient_ListFunctionBuildLogs_Call) Return(logs []cockpit.Log, err error) *MockClient_ListFunctionBuildLogs_Call {
	_c.Call.Return(logs, err)
	return _c
}

func (_c *MockClient_ListFunctionBuildLogs_Call) RunAndReturn(run func(ctx context.Context, resourceName string, start time.Time, end time.Time) ([]cockpit.Log, error)) *MockClient_ListFunctionBuildLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionLogs provides a mock function for the type MockClient
func (_mock *MockClient) ListFunctionLogs(ctx context.Context, resourceName string, start time.Time, end time.Time) ([]cockpit.Log, error) {
	ret := _mock.Called(ctx, resourceName, start, end)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionLogs")
	}

	var r0 []cockpit.Log
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]cockpit.Log, error)); ok {
		return returnFunc(ctx, resourceName, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []cockpit.Log); ok {
		r0 = returnFunc(ctx, resourceName, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cockpit.Log)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, resourceName, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListFunctionLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionLogs'
type MockClient_ListFunctionLogs_Call struct {
	*mock.Call
}

// ListFunctionLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - start time.Time
//   - end time.Time
func (_e *MockClient_Expecter) ListFunctionLogs(ctx interface{}, resourceName interface{}, start interface{}, end interface{}) *MockClient_ListFunctionLogs_Call {
	return &MockClient_ListFunctionLogs_Call{Call: _e.mock.On("ListFunctionLogs", ctx, resourceName, start, end)}
}

func (_c *MockClient_ListFunctionLogs_Call) Run(run func(ctx context.Context, resourceName string, start time.Time, end time.Time)) *MockClient_ListFunctionLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClient_ListFunctionLogs_Call) Return(logs []cockpit.Log, err error) *MockClient_ListFunctionLogs_Call {
	_c.Call.Return(logs, err)
	return _c
}

func (_c *MockClient_ListFunctionLogs_Call) RunAndReturn(run func(ctx context.Context, resourceName string, start time.Time, end time.Time) ([]cockpit.Log, error)) *MockClient_ListFunctionLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLokiClient creates a new instance of MockLokiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLokiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLokiClient {
	mock := &MockLokiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLokiClient is an autogenerated mock type for the LokiClient type
type MockLokiClient struct {
	mock.Mock
}

type MockLokiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLokiClient) EXPECT() *MockLokiClient_Expecter {
	return &MockLokiClient_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type MockLokiClient
func (_mock *MockLokiClient) Query(ctx context.Context, query string, start time.Time, end time.Time) ([]cockpit.Log, error) {
	ret := _mock.Called(ctx, query, start, end)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []cockpit.Log
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]cockpit.Log, error)); ok {
		return returnFunc(ctx, query, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []cockpit.Log); ok {
		r0 = returnFunc(ctx, query, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cockpit.Log)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, query, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLokiClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockLokiClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - start time.Time
//   - end time.Time
func (_e *MockLokiClient_Expecter) Query(ctx interface{}, query interface{}, start interface{}, end interface{}) *MockLokiClient_Query_Call {
	return &MockLokiClient_Query_Call{Call: _e.mock.On("Query", ctx, query, start, end)}
}

func (_c *MockLokiClient_Query_Call) Run(run func(ctx context.Context, query string, start time.Time, end time.Time)) *MockLokiClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLokiClient_Query_Call) Return(logs []cockpit.Log, err error) *MockLokiClient_Query_Call {
	_c.Call.Return(logs, err)
	return _c
}

func (_c *MockLokiClient_Query_Call) RunAndReturn(run func(ctx context.Context, query string, start time.Time, end time.Time) ([]cockpit.Log, error)) *MockLokiClient_Query_Call {
	_c.Call.Return(run)
	return _c
}
