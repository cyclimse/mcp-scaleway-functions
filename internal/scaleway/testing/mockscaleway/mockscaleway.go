// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockscaleway

import (
	"github.com/scaleway/scaleway-sdk-go/api/function/v1beta1"
	"github.com/scaleway/scaleway-sdk-go/scw"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFunctionAPI creates a new instance of MockFunctionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunctionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunctionAPI {
	mock := &MockFunctionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFunctionAPI is an autogenerated mock type for the FunctionAPI type
type MockFunctionAPI struct {
	mock.Mock
}

type MockFunctionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFunctionAPI) EXPECT() *MockFunctionAPI_Expecter {
	return &MockFunctionAPI_Expecter{mock: &_m.Mock}
}

// CreateFunction provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) CreateFunction(createFunctionRequest *function.CreateFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(createFunctionRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(createFunctionRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateFunction")
	}

	var r0 *function.Function
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.CreateFunctionRequest, ...scw.RequestOption) (*function.Function, error)); ok {
		return returnFunc(createFunctionRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.CreateFunctionRequest, ...scw.RequestOption) *function.Function); ok {
		r0 = returnFunc(createFunctionRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Function)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.CreateFunctionRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(createFunctionRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_CreateFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunction'
type MockFunctionAPI_CreateFunction_Call struct {
	*mock.Call
}

// CreateFunction is a helper method to define mock.On call
//   - createFunctionRequest *function.CreateFunctionRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) CreateFunction(createFunctionRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_CreateFunction_Call {
	return &MockFunctionAPI_CreateFunction_Call{Call: _e.mock.On("CreateFunction",
		append([]interface{}{createFunctionRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_CreateFunction_Call) Run(run func(createFunctionRequest *function.CreateFunctionRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_CreateFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.CreateFunctionRequest
		if args[0] != nil {
			arg0 = args[0].(*function.CreateFunctionRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_CreateFunction_Call) Return(function1 *function.Function, err error) *MockFunctionAPI_CreateFunction_Call {
	_c.Call.Return(function1, err)
	return _c
}

func (_c *MockFunctionAPI_CreateFunction_Call) RunAndReturn(run func(createFunctionRequest *function.CreateFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error)) *MockFunctionAPI_CreateFunction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNamespace provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) CreateNamespace(createNamespaceRequest *function.CreateNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(createNamespaceRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(createNamespaceRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *function.Namespace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.CreateNamespaceRequest, ...scw.RequestOption) (*function.Namespace, error)); ok {
		return returnFunc(createNamespaceRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.CreateNamespaceRequest, ...scw.RequestOption) *function.Namespace); ok {
		r0 = returnFunc(createNamespaceRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Namespace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.CreateNamespaceRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(createNamespaceRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_CreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNamespace'
type MockFunctionAPI_CreateNamespace_Call struct {
	*mock.Call
}

// CreateNamespace is a helper method to define mock.On call
//   - createNamespaceRequest *function.CreateNamespaceRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) CreateNamespace(createNamespaceRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_CreateNamespace_Call {
	return &MockFunctionAPI_CreateNamespace_Call{Call: _e.mock.On("CreateNamespace",
		append([]interface{}{createNamespaceRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_CreateNamespace_Call) Run(run func(createNamespaceRequest *function.CreateNamespaceRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_CreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.CreateNamespaceRequest
		if args[0] != nil {
			arg0 = args[0].(*function.CreateNamespaceRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_CreateNamespace_Call) Return(namespace *function.Namespace, err error) *MockFunctionAPI_CreateNamespace_Call {
	_c.Call.Return(namespace, err)
	return _c
}

func (_c *MockFunctionAPI_CreateNamespace_Call) RunAndReturn(run func(createNamespaceRequest *function.CreateNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error)) *MockFunctionAPI_CreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunction provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) DeleteFunction(deleteFunctionRequest *function.DeleteFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(deleteFunctionRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(deleteFunctionRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunction")
	}

	var r0 *function.Function
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.DeleteFunctionRequest, ...scw.RequestOption) (*function.Function, error)); ok {
		return returnFunc(deleteFunctionRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.DeleteFunctionRequest, ...scw.RequestOption) *function.Function); ok {
		r0 = returnFunc(deleteFunctionRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Function)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.DeleteFunctionRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(deleteFunctionRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_DeleteFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunction'
type MockFunctionAPI_DeleteFunction_Call struct {
	*mock.Call
}

// DeleteFunction is a helper method to define mock.On call
//   - deleteFunctionRequest *function.DeleteFunctionRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) DeleteFunction(deleteFunctionRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_DeleteFunction_Call {
	return &MockFunctionAPI_DeleteFunction_Call{Call: _e.mock.On("DeleteFunction",
		append([]interface{}{deleteFunctionRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_DeleteFunction_Call) Run(run func(deleteFunctionRequest *function.DeleteFunctionRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_DeleteFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.DeleteFunctionRequest
		if args[0] != nil {
			arg0 = args[0].(*function.DeleteFunctionRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_DeleteFunction_Call) Return(function1 *function.Function, err error) *MockFunctionAPI_DeleteFunction_Call {
	_c.Call.Return(function1, err)
	return _c
}

func (_c *MockFunctionAPI_DeleteFunction_Call) RunAndReturn(run func(deleteFunctionRequest *function.DeleteFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error)) *MockFunctionAPI_DeleteFunction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) DeleteNamespace(deleteNamespaceRequest *function.DeleteNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(deleteNamespaceRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(deleteNamespaceRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *function.Namespace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.DeleteNamespaceRequest, ...scw.RequestOption) (*function.Namespace, error)); ok {
		return returnFunc(deleteNamespaceRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.DeleteNamespaceRequest, ...scw.RequestOption) *function.Namespace); ok {
		r0 = returnFunc(deleteNamespaceRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Namespace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.DeleteNamespaceRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(deleteNamespaceRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type MockFunctionAPI_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - deleteNamespaceRequest *function.DeleteNamespaceRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) DeleteNamespace(deleteNamespaceRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_DeleteNamespace_Call {
	return &MockFunctionAPI_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace",
		append([]interface{}{deleteNamespaceRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_DeleteNamespace_Call) Run(run func(deleteNamespaceRequest *function.DeleteNamespaceRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.DeleteNamespaceRequest
		if args[0] != nil {
			arg0 = args[0].(*function.DeleteNamespaceRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_DeleteNamespace_Call) Return(namespace *function.Namespace, err error) *MockFunctionAPI_DeleteNamespace_Call {
	_c.Call.Return(namespace, err)
	return _c
}

func (_c *MockFunctionAPI_DeleteNamespace_Call) RunAndReturn(run func(deleteNamespaceRequest *function.DeleteNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error)) *MockFunctionAPI_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeployFunction provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) DeployFunction(deployFunctionRequest *function.DeployFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(deployFunctionRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(deployFunctionRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeployFunction")
	}

	var r0 *function.Function
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.DeployFunctionRequest, ...scw.RequestOption) (*function.Function, error)); ok {
		return returnFunc(deployFunctionRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.DeployFunctionRequest, ...scw.RequestOption) *function.Function); ok {
		r0 = returnFunc(deployFunctionRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Function)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.DeployFunctionRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(deployFunctionRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_DeployFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployFunction'
type MockFunctionAPI_DeployFunction_Call struct {
	*mock.Call
}

// DeployFunction is a helper method to define mock.On call
//   - deployFunctionRequest *function.DeployFunctionRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) DeployFunction(deployFunctionRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_DeployFunction_Call {
	return &MockFunctionAPI_DeployFunction_Call{Call: _e.mock.On("DeployFunction",
		append([]interface{}{deployFunctionRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_DeployFunction_Call) Run(run func(deployFunctionRequest *function.DeployFunctionRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_DeployFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.DeployFunctionRequest
		if args[0] != nil {
			arg0 = args[0].(*function.DeployFunctionRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_DeployFunction_Call) Return(function1 *function.Function, err error) *MockFunctionAPI_DeployFunction_Call {
	_c.Call.Return(function1, err)
	return _c
}

func (_c *MockFunctionAPI_DeployFunction_Call) RunAndReturn(run func(deployFunctionRequest *function.DeployFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error)) *MockFunctionAPI_DeployFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunction provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) GetFunction(getFunctionRequest *function.GetFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(getFunctionRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(getFunctionRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFunction")
	}

	var r0 *function.Function
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionRequest, ...scw.RequestOption) (*function.Function, error)); ok {
		return returnFunc(getFunctionRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionRequest, ...scw.RequestOption) *function.Function); ok {
		r0 = returnFunc(getFunctionRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Function)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.GetFunctionRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(getFunctionRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_GetFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunction'
type MockFunctionAPI_GetFunction_Call struct {
	*mock.Call
}

// GetFunction is a helper method to define mock.On call
//   - getFunctionRequest *function.GetFunctionRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) GetFunction(getFunctionRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_GetFunction_Call {
	return &MockFunctionAPI_GetFunction_Call{Call: _e.mock.On("GetFunction",
		append([]interface{}{getFunctionRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_GetFunction_Call) Run(run func(getFunctionRequest *function.GetFunctionRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_GetFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.GetFunctionRequest
		if args[0] != nil {
			arg0 = args[0].(*function.GetFunctionRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_GetFunction_Call) Return(function1 *function.Function, err error) *MockFunctionAPI_GetFunction_Call {
	_c.Call.Return(function1, err)
	return _c
}

func (_c *MockFunctionAPI_GetFunction_Call) RunAndReturn(run func(getFunctionRequest *function.GetFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error)) *MockFunctionAPI_GetFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionDownloadURL provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) GetFunctionDownloadURL(getFunctionDownloadURLRequest *function.GetFunctionDownloadURLRequest, requestOptions ...scw.RequestOption) (*function.DownloadURL, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(getFunctionDownloadURLRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(getFunctionDownloadURLRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionDownloadURL")
	}

	var r0 *function.DownloadURL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionDownloadURLRequest, ...scw.RequestOption) (*function.DownloadURL, error)); ok {
		return returnFunc(getFunctionDownloadURLRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionDownloadURLRequest, ...scw.RequestOption) *function.DownloadURL); ok {
		r0 = returnFunc(getFunctionDownloadURLRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.DownloadURL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.GetFunctionDownloadURLRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(getFunctionDownloadURLRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_GetFunctionDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionDownloadURL'
type MockFunctionAPI_GetFunctionDownloadURL_Call struct {
	*mock.Call
}

// GetFunctionDownloadURL is a helper method to define mock.On call
//   - getFunctionDownloadURLRequest *function.GetFunctionDownloadURLRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) GetFunctionDownloadURL(getFunctionDownloadURLRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_GetFunctionDownloadURL_Call {
	return &MockFunctionAPI_GetFunctionDownloadURL_Call{Call: _e.mock.On("GetFunctionDownloadURL",
		append([]interface{}{getFunctionDownloadURLRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_GetFunctionDownloadURL_Call) Run(run func(getFunctionDownloadURLRequest *function.GetFunctionDownloadURLRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_GetFunctionDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.GetFunctionDownloadURLRequest
		if args[0] != nil {
			arg0 = args[0].(*function.GetFunctionDownloadURLRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_GetFunctionDownloadURL_Call) Return(downloadURL *function.DownloadURL, err error) *MockFunctionAPI_GetFunctionDownloadURL_Call {
	_c.Call.Return(downloadURL, err)
	return _c
}

func (_c *MockFunctionAPI_GetFunctionDownloadURL_Call) RunAndReturn(run func(getFunctionDownloadURLRequest *function.GetFunctionDownloadURLRequest, requestOptions ...scw.RequestOption) (*function.DownloadURL, error)) *MockFunctionAPI_GetFunctionDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUploadURL provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) GetFunctionUploadURL(getFunctionUploadURLRequest *function.GetFunctionUploadURLRequest, requestOptions ...scw.RequestOption) (*function.UploadURL, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(getFunctionUploadURLRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(getFunctionUploadURLRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionUploadURL")
	}

	var r0 *function.UploadURL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionUploadURLRequest, ...scw.RequestOption) (*function.UploadURL, error)); ok {
		return returnFunc(getFunctionUploadURLRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.GetFunctionUploadURLRequest, ...scw.RequestOption) *function.UploadURL); ok {
		r0 = returnFunc(getFunctionUploadURLRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.UploadURL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.GetFunctionUploadURLRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(getFunctionUploadURLRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_GetFunctionUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUploadURL'
type MockFunctionAPI_GetFunctionUploadURL_Call struct {
	*mock.Call
}

// GetFunctionUploadURL is a helper method to define mock.On call
//   - getFunctionUploadURLRequest *function.GetFunctionUploadURLRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) GetFunctionUploadURL(getFunctionUploadURLRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_GetFunctionUploadURL_Call {
	return &MockFunctionAPI_GetFunctionUploadURL_Call{Call: _e.mock.On("GetFunctionUploadURL",
		append([]interface{}{getFunctionUploadURLRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_GetFunctionUploadURL_Call) Run(run func(getFunctionUploadURLRequest *function.GetFunctionUploadURLRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_GetFunctionUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.GetFunctionUploadURLRequest
		if args[0] != nil {
			arg0 = args[0].(*function.GetFunctionUploadURLRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_GetFunctionUploadURL_Call) Return(uploadURL *function.UploadURL, err error) *MockFunctionAPI_GetFunctionUploadURL_Call {
	_c.Call.Return(uploadURL, err)
	return _c
}

func (_c *MockFunctionAPI_GetFunctionUploadURL_Call) RunAndReturn(run func(getFunctionUploadURLRequest *function.GetFunctionUploadURLRequest, requestOptions ...scw.RequestOption) (*function.UploadURL, error)) *MockFunctionAPI_GetFunctionUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionRuntimes provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) ListFunctionRuntimes(listFunctionRuntimesRequest *function.ListFunctionRuntimesRequest, requestOptions ...scw.RequestOption) (*function.ListFunctionRuntimesResponse, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(listFunctionRuntimesRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(listFunctionRuntimesRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionRuntimes")
	}

	var r0 *function.ListFunctionRuntimesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.ListFunctionRuntimesRequest, ...scw.RequestOption) (*function.ListFunctionRuntimesResponse, error)); ok {
		return returnFunc(listFunctionRuntimesRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.ListFunctionRuntimesRequest, ...scw.RequestOption) *function.ListFunctionRuntimesResponse); ok {
		r0 = returnFunc(listFunctionRuntimesRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.ListFunctionRuntimesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.ListFunctionRuntimesRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(listFunctionRuntimesRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_ListFunctionRuntimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionRuntimes'
type MockFunctionAPI_ListFunctionRuntimes_Call struct {
	*mock.Call
}

// ListFunctionRuntimes is a helper method to define mock.On call
//   - listFunctionRuntimesRequest *function.ListFunctionRuntimesRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) ListFunctionRuntimes(listFunctionRuntimesRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_ListFunctionRuntimes_Call {
	return &MockFunctionAPI_ListFunctionRuntimes_Call{Call: _e.mock.On("ListFunctionRuntimes",
		append([]interface{}{listFunctionRuntimesRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_ListFunctionRuntimes_Call) Run(run func(listFunctionRuntimesRequest *function.ListFunctionRuntimesRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_ListFunctionRuntimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.ListFunctionRuntimesRequest
		if args[0] != nil {
			arg0 = args[0].(*function.ListFunctionRuntimesRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_ListFunctionRuntimes_Call) Return(listFunctionRuntimesResponse *function.ListFunctionRuntimesResponse, err error) *MockFunctionAPI_ListFunctionRuntimes_Call {
	_c.Call.Return(listFunctionRuntimesResponse, err)
	return _c
}

func (_c *MockFunctionAPI_ListFunctionRuntimes_Call) RunAndReturn(run func(listFunctionRuntimesRequest *function.ListFunctionRuntimesRequest, requestOptions ...scw.RequestOption) (*function.ListFunctionRuntimesResponse, error)) *MockFunctionAPI_ListFunctionRuntimes_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctions provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) ListFunctions(listFunctionsRequest *function.ListFunctionsRequest, requestOptions ...scw.RequestOption) (*function.ListFunctionsResponse, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(listFunctionsRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(listFunctionsRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListFunctions")
	}

	var r0 *function.ListFunctionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.ListFunctionsRequest, ...scw.RequestOption) (*function.ListFunctionsResponse, error)); ok {
		return returnFunc(listFunctionsRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.ListFunctionsRequest, ...scw.RequestOption) *function.ListFunctionsResponse); ok {
		r0 = returnFunc(listFunctionsRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.ListFunctionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.ListFunctionsRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(listFunctionsRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_ListFunctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctions'
type MockFunctionAPI_ListFunctions_Call struct {
	*mock.Call
}

// ListFunctions is a helper method to define mock.On call
//   - listFunctionsRequest *function.ListFunctionsRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) ListFunctions(listFunctionsRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_ListFunctions_Call {
	return &MockFunctionAPI_ListFunctions_Call{Call: _e.mock.On("ListFunctions",
		append([]interface{}{listFunctionsRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_ListFunctions_Call) Run(run func(listFunctionsRequest *function.ListFunctionsRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_ListFunctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.ListFunctionsRequest
		if args[0] != nil {
			arg0 = args[0].(*function.ListFunctionsRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_ListFunctions_Call) Return(listFunctionsResponse *function.ListFunctionsResponse, err error) *MockFunctionAPI_ListFunctions_Call {
	_c.Call.Return(listFunctionsResponse, err)
	return _c
}

func (_c *MockFunctionAPI_ListFunctions_Call) RunAndReturn(run func(listFunctionsRequest *function.ListFunctionsRequest, requestOptions ...scw.RequestOption) (*function.ListFunctionsResponse, error)) *MockFunctionAPI_ListFunctions_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) ListNamespaces(listNamespacesRequest *function.ListNamespacesRequest, requestOptions ...scw.RequestOption) (*function.ListNamespacesResponse, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(listNamespacesRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(listNamespacesRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *function.ListNamespacesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.ListNamespacesRequest, ...scw.RequestOption) (*function.ListNamespacesResponse, error)); ok {
		return returnFunc(listNamespacesRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.ListNamespacesRequest, ...scw.RequestOption) *function.ListNamespacesResponse); ok {
		r0 = returnFunc(listNamespacesRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.ListNamespacesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.ListNamespacesRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(listNamespacesRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type MockFunctionAPI_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - listNamespacesRequest *function.ListNamespacesRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) ListNamespaces(listNamespacesRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_ListNamespaces_Call {
	return &MockFunctionAPI_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces",
		append([]interface{}{listNamespacesRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_ListNamespaces_Call) Run(run func(listNamespacesRequest *function.ListNamespacesRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.ListNamespacesRequest
		if args[0] != nil {
			arg0 = args[0].(*function.ListNamespacesRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_ListNamespaces_Call) Return(listNamespacesResponse *function.ListNamespacesResponse, err error) *MockFunctionAPI_ListNamespaces_Call {
	_c.Call.Return(listNamespacesResponse, err)
	return _c
}

func (_c *MockFunctionAPI_ListNamespaces_Call) RunAndReturn(run func(listNamespacesRequest *function.ListNamespacesRequest, requestOptions ...scw.RequestOption) (*function.ListNamespacesResponse, error)) *MockFunctionAPI_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunction provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) UpdateFunction(updateFunctionRequest *function.UpdateFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(updateFunctionRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(updateFunctionRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunction")
	}

	var r0 *function.Function
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.UpdateFunctionRequest, ...scw.RequestOption) (*function.Function, error)); ok {
		return returnFunc(updateFunctionRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.UpdateFunctionRequest, ...scw.RequestOption) *function.Function); ok {
		r0 = returnFunc(updateFunctionRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Function)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.UpdateFunctionRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(updateFunctionRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_UpdateFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunction'
type MockFunctionAPI_UpdateFunction_Call struct {
	*mock.Call
}

// UpdateFunction is a helper method to define mock.On call
//   - updateFunctionRequest *function.UpdateFunctionRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) UpdateFunction(updateFunctionRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_UpdateFunction_Call {
	return &MockFunctionAPI_UpdateFunction_Call{Call: _e.mock.On("UpdateFunction",
		append([]interface{}{updateFunctionRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_UpdateFunction_Call) Run(run func(updateFunctionRequest *function.UpdateFunctionRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_UpdateFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.UpdateFunctionRequest
		if args[0] != nil {
			arg0 = args[0].(*function.UpdateFunctionRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_UpdateFunction_Call) Return(function1 *function.Function, err error) *MockFunctionAPI_UpdateFunction_Call {
	_c.Call.Return(function1, err)
	return _c
}

func (_c *MockFunctionAPI_UpdateFunction_Call) RunAndReturn(run func(updateFunctionRequest *function.UpdateFunctionRequest, requestOptions ...scw.RequestOption) (*function.Function, error)) *MockFunctionAPI_UpdateFunction_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForNamespace provides a mock function for the type MockFunctionAPI
func (_mock *MockFunctionAPI) WaitForNamespace(waitForNamespaceRequest *function.WaitForNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error) {
	var tmpRet mock.Arguments
	if len(requestOptions) > 0 {
		tmpRet = _mock.Called(waitForNamespaceRequest, requestOptions)
	} else {
		tmpRet = _mock.Called(waitForNamespaceRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WaitForNamespace")
	}

	var r0 *function.Namespace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*function.WaitForNamespaceRequest, ...scw.RequestOption) (*function.Namespace, error)); ok {
		return returnFunc(waitForNamespaceRequest, requestOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(*function.WaitForNamespaceRequest, ...scw.RequestOption) *function.Namespace); ok {
		r0 = returnFunc(waitForNamespaceRequest, requestOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*function.Namespace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*function.WaitForNamespaceRequest, ...scw.RequestOption) error); ok {
		r1 = returnFunc(waitForNamespaceRequest, requestOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFunctionAPI_WaitForNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForNamespace'
type MockFunctionAPI_WaitForNamespace_Call struct {
	*mock.Call
}

// WaitForNamespace is a helper method to define mock.On call
//   - waitForNamespaceRequest *function.WaitForNamespaceRequest
//   - requestOptions ...scw.RequestOption
func (_e *MockFunctionAPI_Expecter) WaitForNamespace(waitForNamespaceRequest interface{}, requestOptions ...interface{}) *MockFunctionAPI_WaitForNamespace_Call {
	return &MockFunctionAPI_WaitForNamespace_Call{Call: _e.mock.On("WaitForNamespace",
		append([]interface{}{waitForNamespaceRequest}, requestOptions...)...)}
}

func (_c *MockFunctionAPI_WaitForNamespace_Call) Run(run func(waitForNamespaceRequest *function.WaitForNamespaceRequest, requestOptions ...scw.RequestOption)) *MockFunctionAPI_WaitForNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *function.WaitForNamespaceRequest
		if args[0] != nil {
			arg0 = args[0].(*function.WaitForNamespaceRequest)
		}
		var arg1 []scw.RequestOption
		var variadicArgs []scw.RequestOption
		if len(args) > 1 {
			variadicArgs = args[1].([]scw.RequestOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockFunctionAPI_WaitForNamespace_Call) Return(namespace *function.Namespace, err error) *MockFunctionAPI_WaitForNamespace_Call {
	_c.Call.Return(namespace, err)
	return _c
}

func (_c *MockFunctionAPI_WaitForNamespace_Call) RunAndReturn(run func(waitForNamespaceRequest *function.WaitForNamespaceRequest, requestOptions ...scw.RequestOption) (*function.Namespace, error)) *MockFunctionAPI_WaitForNamespace_Call {
	_c.Call.Return(run)
	return _c
}
